// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5PMrCeU3oKkGZuRi6ET9Vk
// Component: FVXnXoBRd0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_devyn_green_com.module.css"; // plasmic-import: 5PMrCeU3oKkGZuRi6ET9Vk/projectcss
import sty from "./PlasmicPolicies.module.css"; // plasmic-import: FVXnXoBRd0/css

createPlasmicElementProxy;

export type PlasmicPolicies__VariantMembers = {};
export type PlasmicPolicies__VariantsArgs = {};
type VariantPropType = keyof PlasmicPolicies__VariantsArgs;
export const PlasmicPolicies__VariantProps = new Array<VariantPropType>();

export type PlasmicPolicies__ArgsType = {};
type ArgPropType = keyof PlasmicPolicies__ArgsType;
export const PlasmicPolicies__ArgProps = new Array<ArgPropType>();

export type PlasmicPolicies__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  text?: Flex__<"div">;
  h3?: Flex__<"h3">;
};

export interface DefaultPoliciesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPolicies__RenderFunc(props: {
  variants: PlasmicPolicies__VariantsArgs;
  args: PlasmicPolicies__ArgsType;
  overrides: PlasmicPolicies__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h3
                    data-plasmic-name={"h3"}
                    data-plasmic-override={overrides.h3}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3
                    )}
                  >
                    {"Privacy Policy for the Personal Brand of Devyn Green: "}
                  </h3>
                }
                <React.Fragment>
                  {
                    "\nWe take your privacy seriously. This Privacy Policy explains how we collect, use, and protect your personal information in connection with our personal brand advertising on Meta with lead form ads.\n\n"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Information We Collect"}
                </span>
                <React.Fragment>
                  {
                    "\nWe collect personal information that you voluntarily provide to us when you submit a lead form through our ads. This may include your name, email address, and any other information you choose to provide.\n\n"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"How We Use Your Information"}
                </span>
                <React.Fragment>
                  {
                    "\nWe use your information to respond to your inquiries, provide information about our products and services, and improve our advertising campaigns. We may also use your information to send you promotional materials that we believe may be of interest to you.\n\n"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Information We Share"}
                </span>
                <React.Fragment>
                  {
                    "\nWe do not share your personal information with any third parties for marketing purposes. We may share your information with service providers that assist us with our advertising campaigns, but only to the extent necessary for them to perform their services.\n\n"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Data Retention"}
                </span>
                <React.Fragment>
                  {
                    "\nWe retain your personal information for as long as necessary to fulfill the purposes for which it was collected or as required by law.\n\nYour Rights\nYou have the right to request access to and correction of your personal information. You may also request that we delete your personal information, although we may be required to retain certain information for legal or business purposes.\n\n"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Contact Us"}
                </span>
                <React.Fragment>
                  {
                    "\nIf you have any questions or concerns about our Privacy Policy, please contact us at me@devyngreen.com.\n\n"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Updates to Privacy Policy"}
                </span>
                <React.Fragment>
                  {
                    "\nWe may update this Privacy Policy from time to time to reflect changes in our practices. We encourage you to review this Policy periodically for any updates or changes."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text", "h3"],
  freeBox: ["freeBox", "text", "h3"],
  text: ["text", "h3"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  text: "div";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPolicies__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPolicies__VariantsArgs;
    args?: PlasmicPolicies__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPolicies__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPolicies__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPolicies__ArgProps,
          internalVariantPropNames: PlasmicPolicies__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPolicies__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPolicies";
  } else {
    func.displayName = `PlasmicPolicies.${nodeName}`;
  }
  return func;
}

export const PlasmicPolicies = Object.assign(
  // Top-level PlasmicPolicies renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicPolicies
    internalVariantProps: PlasmicPolicies__VariantProps,
    internalArgProps: PlasmicPolicies__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPolicies;
/* prettier-ignore-end */
