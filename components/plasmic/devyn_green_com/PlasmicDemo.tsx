// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5PMrCeU3oKkGZuRi6ET9Vk
// Component: sXQzK83Pt-G

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Video } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantszXvk5LPyXewS } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: zXvk5lPy-xewS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_devyn_green_com.module.css"; // plasmic-import: 5PMrCeU3oKkGZuRi6ET9Vk/projectcss
import sty from "./PlasmicDemo.module.css"; // plasmic-import: sXQzK83Pt-G/css

createPlasmicElementProxy;

export type PlasmicDemo__VariantMembers = {};
export type PlasmicDemo__VariantsArgs = {};
type VariantPropType = keyof PlasmicDemo__VariantsArgs;
export const PlasmicDemo__VariantProps = new Array<VariantPropType>();

export type PlasmicDemo__ArgsType = {};
type ArgPropType = keyof PlasmicDemo__ArgsType;
export const PlasmicDemo__ArgProps = new Array<ArgPropType>();

export type PlasmicDemo__OverridesType = {
  root?: Flex__<"div">;
  navBar?: Flex__<"div">;
  intro?: Flex__<"section">;
  h1?: Flex__<"h1">;
  h2?: Flex__<"h2">;
  htmlVideo?: Flex__<typeof Video>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultDemoProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDemo__RenderFunc(props: {
  variants: PlasmicDemo__VariantsArgs;
  args: PlasmicDemo__ArgsType;
  overrides: PlasmicDemo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszXvk5LPyXewS()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames(projectcss.all, sty.navBar)}
          >
            <div className={classNames(projectcss.all, sty.columns___7InuF)}>
              <div className={classNames(projectcss.all, sty.column__ridFe)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9Glm4
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Devyn Green"}
                    </span>
                  </React.Fragment>
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___5TyXi)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/devyn_green_com/images/cbd3733DDgSignatureBllack1000000000000000000028Png.png",
                    fullWidth: 316,
                    fullHeight: 67,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__xhHkj)} />

              <div className={classNames(projectcss.all, sty.column___6JKod)} />
            </div>
          </div>
          <Stack__
            as={"section"}
            data-plasmic-name={"intro"}
            data-plasmic-override={overrides.intro}
            hasGap={true}
            className={classNames(projectcss.all, sty.intro)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__u1Vec)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xt7Q
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Ads & Funnels: From Start to Launch In 1 Hour"}
                    </h1>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3O3PE
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"7-Minute Run Time: "}
                        </span>
                        <React.Fragment>
                          {
                            "A blueprint to predictably launching profitable campaigns in 1 hour or less with expert AI systems. "
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </h2>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ztaqv)}>
                <div className={classNames(projectcss.all, sty.columns__fhyl9)}>
                  <div
                    className={classNames(projectcss.all, sty.column__pQrW1)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__xh8Kn)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/devyn_green_com/images/upworkProfilepng.png",
                        fullWidth: 1000,
                        fullHeight: 1000,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__vrbgM)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zljmz
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Devyn Green"}
                          </span>
                          <React.Fragment>
                            {
                              " on Artificially Intelligent Growth Marketing Systems & Processes"
                            }
                          </React.Fragment>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Devyn Green"}
                          </span>
                          <React.Fragment>
                            {
                              " on Artificially Intelligent Growth Marketing Systems & Processes"
                            }
                          </React.Fragment>
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__xb8Zk)}>
              <Video
                data-plasmic-name={"htmlVideo"}
                data-plasmic-override={overrides.htmlVideo}
                className={classNames("__wab_instance", sty.htmlVideo)}
                controls={true}
                src={
                  "https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm"
                }
              />

              <Embed
                data-plasmic-name={"embedHtml"}
                data-plasmic-override={overrides.embedHtml}
                className={classNames("__wab_instance", sty.embedHtml)}
                code={
                  '<script src="https://fast.wistia.com/embed/medias/4uzeim2xph.jsonp" async></script><script src="https://fast.wistia.com/assets/external/E-v1.js" async></script><div class="wistia_responsive_padding" style="padding:56.25% 0 0 0;position:relative;"><div class="wistia_responsive_wrapper" style="height:100%;left:0;position:absolute;top:0;width:100%;"><div class="wistia_embed wistia_async_4uzeim2xph videoFoam=true" style="height:100%;position:relative;width:100%"><div class="wistia_swatch" style="height:100%;left:0;opacity:0;overflow:hidden;position:absolute;top:0;transition:opacity 200ms;width:100%;"><img src="https://fast.wistia.com/embed/medias/4uzeim2xph/swatch" style="filter:blur(5px);height:100%;object-fit:contain;width:100%;" alt="" aria-hidden="true" onload="this.parentNode.style.opacity=1;" /></div></div></div></div>'
                }
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__m0UEu)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "100%"
                    : "441px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "auto"
                    : "784px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/devyn_green_com/images/comingSoonsvg.svg",
                  fullWidth: 267,
                  fullHeight: 150,
                  aspectRatio: 1.777778
                }}
              />
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navBar", "intro", "h1", "h2", "htmlVideo", "embedHtml"],
  navBar: ["navBar"],
  intro: ["intro", "h1", "h2", "htmlVideo", "embedHtml"],
  h1: ["h1"],
  h2: ["h2"],
  htmlVideo: ["htmlVideo"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: "div";
  intro: "section";
  h1: "h1";
  h2: "h2";
  htmlVideo: typeof Video;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDemo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDemo__VariantsArgs;
    args?: PlasmicDemo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDemo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDemo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDemo__ArgProps,
          internalVariantPropNames: PlasmicDemo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDemo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDemo";
  } else {
    func.displayName = `PlasmicDemo.${nodeName}`;
  }
  return func;
}

export const PlasmicDemo = Object.assign(
  // Top-level PlasmicDemo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    intro: makeNodeComponent("intro"),
    h1: makeNodeComponent("h1"),
    h2: makeNodeComponent("h2"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicDemo
    internalVariantProps: PlasmicDemo__VariantProps,
    internalArgProps: PlasmicDemo__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDemo;
/* prettier-ignore-end */
